Міністерство освіти і науки України
Харківський національний університет радіоелектроніки


Кафедра «Програмної Інженерії»





ЗВІТ
з практичного завдання № 2
з дисципліни «Аналіз та рефакторинг коду»










Виконав: 
ст. гр. ПЗПІ-22-8
Петренко К. С.
Перевірив: 
Ст. викладач каф. ПІ 
Сокорчук І. П.









Харків 2024

 Мета: навчитися основним методам рефакторингу коду на основі реальних прикладів з власних програмних проєктів. Навчитися ідентифікувати проблеми в коді та використовувати відповідні методи рефакторингу для покращення його якості.

 Тема: методи рефакторингу коду програмного забезпечення
ХІД РОБОТИ
1. Replace parameter with method (Заміна параметра методом)
Опис методу: застосовується, коли значення параметра можна отримати всередині методу, використовуючи інший метод класу чи об’єкта. Це допомагає спростити інтерфейс методу, зменшити кількість параметрів і уникнути передачі значень, які метод може розрахувати самостійно.

1 // До рефакторингу
2 private static int parseInt(String s) {
3     int num = 0;
4     for (int i = 0; i < s.length(); i++) {
5         char c = s.charAt(i);
6         if (c >= '0' && c <= '9') {
7             num = num * 10 + (c - '0');
8         } else {
9             return -1;
10         }
11     }
12     return num;
13 }
14 
15 // Після рефакторингу
16 public double GetPrice(){
17     if (DiscountLevel == 2)
18         return BasePrice * 0.1;
19     return BasePrice * 0.05;
20 }
21 
22 private double BasePrice{
23     get{
24         return quantity * itemPrice;
25     }
26 }
27 
28 private int DiscountLevel{
29     get{
30         if (quantity > 100)
31             return 2;
32         return 1;
33     }
34 }

Переваги використання методу:
1) Зменшення кількості параметрів у методі: передача параметрів у метод 
часто ускладнює його використання, особливо якщо значення можуть бути отримані всередині методу. Використання цього методу знижує кількість параметрів, роблячи метод простішим і зрозумілішим.
2) Покращення інкапсуляції: коли значення параметра можна обчислити 
за допомогою іншого методу або властивості класу, це зменшує залежність від зовнішніх значень і підвищує інкапсуляцію даних. Метод тепер не залежить від значень, які надає користувач, і може самостійно отримати необхідну інформацію.
3) Полегшення обслуговування та розширення коду: якщо логіка 
обчислення значення зміниться, достатньо буде змінити лише один метод. Це зменшує кількість місць, які потрібно змінювати в коді, і робить його легшим для підтримки.


2. Replace Error code with Exception (Заміна кода помилки винятком)
Опис методу: метод "Замінити код помилки винятком" застосовується, коли потрібно замінити стандартні коди помилок на механізм обробки винятків. Замість повернення числового коду чи спеціального значення при виникненні помилки, метод або функція генерує виняток. Це дозволяє краще керувати помилками, оскільки винятки можуть бути оброблені у певному місці коду, що робить код чистішим, зручнішим для читання та підтримки.

1 // До рефакторингу
2 private static int parseInt(String s) {
3     int num = 0;
4     for (int i = 0; i < s.length(); i++) {
5         char c = s.charAt(i);
6         if (c >= '0' && c <= '9') {
7             num = num * 10 + (c - '0');
8         } else {
9             return -1;
10         }
11     }
12     return num;
13 }
14 
15 // Після рефакторингу
16 private static int parseInt(String s) {
17     int num = 0;
18     for (int i = 0; i < s.length(); i++) {
19       char c = s.charAt(i);
20       if (c >= '0' && c <= '9') {
21         num = num * 10 + (c - '0');
22       } else {
23         throw new IllegalArgumentException("Неправильний формат числа: " + s);
24       }
25     }
26     return num;
27   }

Переваги використання методу:
1) Покращення читабельності коду: використання винятків замість кодів 
помилок робить код чистішим і зрозумілішим. Код помилки часто приховує логіку обробки помилок, тоді як винятки роблять їх явними і зрозумілими для розробників.
2) Централізована обробка помилок: винятки дозволяють обробляти 
помилки в одному місці (наприклад, у try-catch блоці або у вищому рівні викликів), замість того, щоб обробляти їх локально за допомогою кодів помилок. Це робить керування помилками більш організованим і знижує ймовірність пропущених помилок.
3) Вдосконалення інформативності помилок: код помилки зазвичай 
представляє лише число або спеціальне значення, яке не містить детальної інформації про причину помилки. Винятки ж можуть містити детальний опис помилки, як у прикладі throw new IllegalArgumentException("Неправильний формат числа: " + s);. Це допомагає краще розуміти і швидко виправляти помилки.


3. Remove parameter (Видалення параметра)
Опис методу: метод "Видалення параметра" застосовується, коли параметр методу більше не потрібен, або його можна визначити з інших даних у класі чи контексті методу. Це дозволяє зробити код чистішим, зменшити кількість непотрібних параметрів, уникнути надлишкової інформації та покращити зрозумілість методу.

01 // До рефакторингу
02   public static String convert1(String input) {
03     StringBuilder output = new StringBuilder();
04     String[] rows = input.split("\n");
05     output.append("LastName;Email").append("\n");
06     for (int i = 1; i < rows.length; i++) {
07       String[] columns = rows[i].split(";");
08       String[] fullName = columns[1].split(" ");
09       String lastName = fullName[fullName.length - 1];
10       String email = columns[2];
11       output.append(lastName).append(";").append(email);
12       if (i < rows.length - 1) {
13         output.append("\n");
14       }
15     }
16     return output.toString();
17   }
18 
19 // Після рефакторингу
20 public static String convert1() {
21     String input = Utils.getContent(PATH); // отримуємо вміст без параметра
22     StringBuilder output = new StringBuilder();
23     String[] rows = input.split("\n");
24     output.append("LastName;Email").append("\n");
25     for (int i = 1; i < rows.length; i++) {
26         String[] columns = rows[i].split(";");
27         String[] fullName = columns[1].split(" ");
28         String lastName = fullName[fullName.length - 1];
29         String email = columns[2];
30         output.append(lastName).append(";").append(email);
31         if (i < rows.length - 1) {
32             output.append("\n");
33         }
34     }
35     return output.toString();
36 }

Переваги використання методу:
1) Зменшення кількості параметрів: видалення зайвих параметрів робить 
метод простішим і легшим для розуміння. Це особливо корисно, коли параметр можна отримати з іншого джерела, наприклад, як у прикладі, де input витягується за допомогою Utils.getContent(PATH).
2) Підвищення інкапсуляції: метод більше не залежить від зовнішнього 
значення, яке може бути передано, і може самостійно отримувати необхідні дані. Це робить метод більш автономним і зменшує ризик виникнення помилок через неправильне передавання значень.
3) Покращення читабельності коду: менша кількість параметрів робить 
метод зрозумілішим і простішим для використання. Тепер кожен, хто викликає цей метод, не потребує передавати input, оскільки метод сам обробляє вхідні дані з визначеного джерела.


Висновки:
     Під час виконання практичного завдання я навчився основним методам рефакторингу коду на основі реальних прикладів з власних програмних проєктів. Навчився ідентифікувати проблеми в коді та використовувати відповідні методи рефакторингу для покращення його якості.
     Посилання на відеозапис: https://youtu.be/afAfhll448g











Список використаних джерел:
1. Martin Fowler. Refactoring. URL: https://refactoring.com/ (дата звернення: 12.11.2024).
2. Refactoring.Guru. Refactoring Techniques and Patterns. URL: https://refactoring.guru/ (дата звернення: 12.11.2024).
3. Вікіпедія. Рефакторинг. URL: https://en.wikipedia.org/wiki/Code_refactoring (дата звернення: 12.11.2024).
















Додаток А

Рисунок А.1 – Титульний слайд презентації


Рисунок А.2 – Зміст презентації


Рисунок А.3 – Вступ


Рисунок А.4 – Обрані методи для розгляду


Рисунок А.5 – Опис першого методу


Рисунок А.6 – Приклади коду для першого методу


Рисунок А.7 – Опис другого методу


Рисунок А.8 – Приклади коду для другого методу


Рисунок А.9 – Опис третього методу


Рисунок А.10 – Приклади коду для третього методу


Рисунок А.11 – Висновки


Рисунок А.12 – Список використаних джерел


Рисунок А.13 – Завершальний слайд

